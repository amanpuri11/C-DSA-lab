#include <stdio.h>
#include <stdlib.h>
struct Node{
    struct Node *prv;
    int data;
    struct Node *next;
};
struct Node *head = NULL, *tail = NULL;
struct Node*  createNode(){
    struct Node *temp = (struct Node*)malloc(sizeof(struct Node));
    printf("Enter data: ");
    scanf("%d",&temp->data);
    temp->prv=NULL;
    temp->next=NULL;
    return temp;
}
void create(){
    int n, i;
    printf("Enter no. of nodes: ");
    scanf ("%d",&n);
    for(i=1; i<=n; i++){
        struct Node *newNode=createNode();
        if(head==NULL){
            head = newNode; 
            tail = newNode;
            }
        else{
            tail->next=newNode;
            newNode->prv=tail;
        }
        tail=newNode;
    }
}
void display(){
    if(head==NULL)
        printf("List is empty!!!\n");
    else{
        struct Node *temp=head;
        while(temp!=NULL){
            printf("%d ",temp->data);
            temp=temp->next;
        }
    }
}
void displayRev(){                     // display in reverse order
    if(head==NULL)
        printf("List is empty!!!\n");
    else{
        struct Node *temp=tail;
        while(temp!=NULL){
            printf("%d ",temp->data);
            temp=temp->prv;
        }
    }
}
void insertInBeg(){
    struct Node *newNode=createNode();
    if(head==NULL){
        head=newNode;
        tail=newNode;
    }
    else{
        newNode->next=head;
        head->prv=newNode;
        head=newNode;
    }
}
void insertAtEnd(){
     struct Node *newNode=createNode();
    if(tail==NULL){
        head=newNode;
        tail=newNode;
    }
      else{
        tail->next=head;
        newNode->prv=tail;
        tail=newNode;
    }
}
void insertAtAnyPos(){
    if(head==NULL)
    printf("List is empty!!!\n");
    else{
        int pos;
        printf("ENter position: ");
        scanf("%d",&pos);  
        if(pos==1){
            struct Node *newNode=createNode();
            head->prv=newNode;
            newNode->next=head;
            head=newNode;
        }
        else{
            int cnt=1;
            struct Node *temp=head;
            while(temp!=NULL){
                if(cnt==pos)
                break;
                else{
                    cnt++;
                    temp=temp->next;
                }
            }
            if(temp==NULL)
            printf("Invalid position!!!\n");
            else{
                struct Node *newNode=createNode();
                newNode->prv=temp->prv;
                temp->prv->next=newNode;
                newNode->next=temp;
                temp->prv=newNode;

            }
        }
    }
}
void deleteNode(int pos) {
    if(head == NULL) {
        printf("List is empty!!!\n");
    } else {
        struct Node *temp = head;
        int cnt = 1;
        while(temp != NULL && cnt < pos) {
            temp = temp->next;
            cnt++;
        }
        if(temp == NULL) {
            printf("Invalid position!!!\n");
        } else {
            if(temp->prv != NULL)
                temp->prv->next = temp->next;
            if(temp->next != NULL)
                temp->next->prv = temp->prv;
            if(temp == head)
                head = temp->next;
            if(temp == tail)
                tail = temp->prv;
            free(temp);
            printf("Node deleted at position %d\n", pos);
        }
    }
}

void searchNode(int data) {
    if(head == NULL) {
        printf("List is empty!!!\n");
    } else {
        struct Node *temp = head;
        int pos = 1;
        while(temp != NULL) {
            if(temp->data == data) {
                printf("Node found at position %d\n", pos);
                return;
            }
            temp = temp->next;
            pos++;
        }
        printf("Node not found in the list\n");
    }
}

int main(){
    create();
    while(1){
        printf("\n1. Insert node in beginning\n");
        printf("2. Insert node at end\n");
        printf("3. Insert node at any position\n");
        printf("4. Delete node from given position\n");
        printf("5. Search node in the list\n");
        printf("6. Display(forward) list\n");
        printf("7. Display(reverse)\n");
        printf("8. Exit\n");
        int choice, pos, data;
        printf("Enter choice: ");
        scanf("%d",&choice);
        switch(choice){
            case 1:
            insertInBeg();
            break;
            case 2:
            insertAtEnd();
            break;
            case 3:
            insertAtAnyPos();
            break;
            case 4:
            printf("Enter position to delete: ");
                scanf("%d", &pos);
                deleteNode(pos);
            break;
            case 5:
            printf("Enter data to search: ");
                scanf("%d", &data);
                searchNode(data);
            break;
            case 6:
            display();
            break;
            case 7:
            displayRev();
            break;
            case 8:
            exit(0);
            break;
            default:
            printf("Invalid choice!!!");
        }
        printf("\n");
    }
    return 0;
}
